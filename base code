#Slither game
import pygame #imports code library
import math #needed for square root function
import random


pygame.init()#initializes pygame
pygame.display.set_caption("Slither")#sets the window title
screen = pygame.display.set_mode((400,400))#creates game screen
clock = pygame.time.Clock()#starts game clock

#game variables
doExit = False

#player variables
xPos = 200
yPos = 200
Vx = 1
Vy = 1

#player 2 variables
xPos2 = 200
yPos2 = 200
Vx2 = 1
Vy2 = 1

#pellets--------------------------------------------------------------
class pellet:
  def __init__(self, xpos, ypos, red, green, blue, radius):
       self.xpos = xpos
       self.ypos = ypos
       self.red = red
       self.green = green
       self.blue = blue
       self.radius = radius
  def collide(self, x, y):
    if math.sqrt((x-self.xpos)*(x-self.xpos)+(y-self.ypos)*(y-self.ypos)) < self.radius + 6:
      #all these things are INSIDE the if statement above, so they need to be tabbed over :)
      self.xpos = random.randrange(0,400)
      self.ypos = random.randrange(0,400)
      self.red = random.randrange(0,255)
      self.green = random.randrange(0,255)
      self.blue = random.randrange(0,255)
      self.radius = random.randrange(0,30)
      return True
  def draw(self):
    pygame.draw.circle(screen, (self.red, self.green, self.blue), (self.xpos, self.ypos), self.radius)
    
#end class pellets-----------------------------------------------------------
class Tailseg:
  def __init__(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
  def update(self, xpos, ypos):
    self.xpos = xpos
    self.ypos = ypos
  def draw(self):
    pygame.draw.circle(screen, (200, 0, 0), (self.xpos, self.ypos), 12)
  def collide(self, x, y):
    if math.sqrt((x-self.xpos)*(x-self.xpos)*(y-self.ypos)*(y-self.ypos)) <6:
      return True



pelletBag = list()#creates a list data structure
tail = list()
tail2 = list()

#push 10 pellets into the list
for i in range(10):
  pelletBag.append(pellet(random.randrange(0, 400), random.randrange(0, 400), 125, 0, 220, 10))

oldX = 200
oldY = 200

oldX2 = 200
oldY2 = 200
counter = 0


#Gameloop-------------------------------------------------
while not doExit:

#event/input section---------------------------------------
  clock.tick(60)

  for event in pygame.event.get():#grabs any event like a keyboard click
    if event.type == pygame.QUIT:
      doExit = True
  
  if event.type == pygame.MOUSEMOTION:
    mousePos = event.pos

    if mousePos[0]>xPos:
      Vx = 1
    else:
      Vx = -1
    if mousePos[1]>yPos:
      Vy = 1
    else:
      Vy = -1

  #player 2 keyboard input
  keys = pygame.key.get_pressed()
  if keys[pygame.K_LEFT]:
    xPos2 -=1
  if keys[pygame.K_RIGHT]:
    xPos2 +=1
  if keys[pygame.K_UP]:
    yPos2 -=1
  if keys[pygame.K_DOWN]:
    yPos2 +=1


#physiscs section------------------------------------------
  #update circle positon
  xPos += Vx
  yPos += Vy

  #collision
  for i in range(10):
   if pelletBag[i].collide(xPos, yPos) == True:
      tail.append(Tailseg(oldX, oldY))
  for e in range(10):
   if pelletBag[e].collide(xPos, yPos) == True:
      tail.append(Tailseg(oldX, oldY))
  for i in range(10):
   if pelletBag[i].collide(xPos2, yPos2) == True:
      tail2.append(Tailseg(oldX2, oldY2))
  for e in range(10):
   if pelletBag[i].collide(xPos2, yPos2) == True:
      tail2.append(Tailseg(oldX2, oldY2))

  counter+=1#update counter
  if counter == 20: #creates a delay
    counter = 0#reset counter every 20 ticks
    oldX = xPos
    oldY = yPos
    oldX2 = xPos2
    oldY2 = yPos2


    if(len(tail)>2):#dont push numbers if no node
      for i in range(len(tail)):#loop for each slot in list
    #start in LAST position, push the *second to last* into it, repeat till at begining
        tail[len(tail)-i-1].xpos = tail[len(tail)-i-2].xpos
        tail[len(tail)-i-1].ypos = tail[len(tail)-i-2].ypos

    if(len(tail2)>2):
      for i in range(len(tail2)):
        tail2[len(tail2)-i-1].xpos = tail2[len(tail2)-i-2].xpos
        tail2[len(tail2)-i-1].ypos = tail2[len(tail2)-i-2].ypos

    
    if(len(tail)>0): #if you have at least one segment push old head position into that
      tail[0].update(oldX, oldY)#push head position into first head position of list

    if(len(tail2)>0):
      tail[0].update(oldX2, oldY2)
  
  for i in range(len(tail2)):
    if tail2[i].collide(xPos, yPos) == True:
      print("p1 hit p2's tail!!")
      doExit = True

  for i in range(len(tail)):
    if tail[i].collide(xPos2, yPos2) == True:
      print("p2 hit p1's tail!!")
      doExit = True



#death wall-------------------------------------------------------------
  if xPos < 0 or xPos + 20 > 400:
    doExit = True
  if yPos < 0 or yPos + 20 > 400:
    doExit = True

  if xPos2 < 0 or xPos2 + 20 > 400:
    doExit = True
  if yPos2 < 0 or yPos2 + 20 > 400:
    doExit = True
#death wall end-----------------------------------------------------------




#render section------------------------------------------
  screen.fill((255, 255, 255))#wipes screen

  for i in range(10):
    pelletBag[i].draw()
  for e in range(10):
    pelletBag[e].draw()
  
  for i in range(len(tail)):
    tail[i].draw()
  for e in range(len(tail)):
    tail[e].draw()
  for i in range(len(tail2)):
    tail2[i].draw()
  for e in range(len(tail2)):
    tail2[e].draw()

  pygame.draw.circle(screen, (200, 0, 200),(xPos, yPos), 12)
  pygame.draw.circle(screen, (10, 50, 200),(xPos2, yPos2), 12)
  
  

  pygame.display.flip()


#end game loop----------------------------------------------
pygame.quit()
